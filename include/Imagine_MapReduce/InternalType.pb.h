// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InternalType.proto

#ifndef PROTOBUF_InternalType_2eproto__INCLUDED
#define PROTOBUF_InternalType_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace Imagine_MapReduce {
namespace Internal {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_InternalType_2eproto();
void protobuf_AssignDesc_InternalType_2eproto();
void protobuf_ShutdownFile_InternalType_2eproto();


enum Identity {
  Mapper = 0,
  Reducer = 1,
  Master = 2,
  Identity_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Identity_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Identity_IsValid(int value);
const Identity Identity_MIN = Mapper;
const Identity Identity_MAX = Master;
const int Identity_ARRAYSIZE = Identity_MAX + 1;

const ::google::protobuf::EnumDescriptor* Identity_descriptor();
inline const ::std::string& Identity_Name(Identity value) {
  return ::google::protobuf::internal::NameOfEnum(
    Identity_descriptor(), value);
}
inline bool Identity_Parse(
    const ::std::string& name, Identity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Identity>(
    Identity_descriptor(), name, value);
}
enum TaskStatus {
  Start = 0,
  Process = 1,
  Finish = 2,
  TaskStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TaskStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TaskStatus_IsValid(int value);
const TaskStatus TaskStatus_MIN = Start;
const TaskStatus TaskStatus_MAX = Finish;
const int TaskStatus_ARRAYSIZE = TaskStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskStatus_descriptor();
inline const ::std::string& TaskStatus_Name(TaskStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskStatus_descriptor(), value);
}
inline bool TaskStatus_Parse(
    const ::std::string& name, TaskStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskStatus>(
    TaskStatus_descriptor(), name, value);
}
enum Status {
  Ok = 0,
  Error = 1,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Status_IsValid(int value);
const Status Status_MIN = Ok;
const Status Status_MAX = Error;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Internal
}  // namespace Imagine_MapReduce

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Imagine_MapReduce::Internal::Identity> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Imagine_MapReduce::Internal::Identity>() {
  return ::Imagine_MapReduce::Internal::Identity_descriptor();
}
template <> struct is_proto_enum< ::Imagine_MapReduce::Internal::TaskStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Imagine_MapReduce::Internal::TaskStatus>() {
  return ::Imagine_MapReduce::Internal::TaskStatus_descriptor();
}
template <> struct is_proto_enum< ::Imagine_MapReduce::Internal::Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Imagine_MapReduce::Internal::Status>() {
  return ::Imagine_MapReduce::Internal::Status_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_InternalType_2eproto__INCLUDED
